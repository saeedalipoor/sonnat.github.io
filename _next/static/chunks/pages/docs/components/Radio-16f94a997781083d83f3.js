(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2110],{6021:function(t,e,l){"use strict";l.r(e),l.d(e,{default:function(){return w},meta:function(){return x}});var n=l(6265),o=l(8140),a=l(8347),d=l(7294),i=l(3905),u=l(7305),r=l(9182),s=l(8055),k=l(1786),c=l(9568),p=l(5893),h=l(2292),m=l(7913),b=l(1600),f=function(){var t=d.useState(!1),e=(0,h.Z)(t,2),l=e[0],n=e[1];return(0,p.jsx)(b.Z,{flexDirection:"column",code:'import Radio from "@sonnat/ui/Radio";\nimport Button from "@sonnat/ui/Button";\nimport * as React from "react";\n\nconst Demo: React.FC = () => {\n  const [checked, setChecked] = React.useState(false);\n\n  return (\n    <React.Fragment>\n      <Button\n        variant="outlined"\n        size="small"\n        label="Toggle the Radio"\n        onClick={() => void setChecked(c => !c)}\n      />\n      <Radio\n        label="Label"\n        checked={checked}\n        inputProps={{ id: "radio-2" }}\n        onChange={() => void setChecked(true)}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default Demo;\n',children:(0,p.jsxs)(d.Fragment,{children:[(0,p.jsx)(m.Z,{variant:"outlined",size:"small",label:"Toggle the Radio",onClick:function(){n((function(t){return!t}))}}),(0,p.jsx)(u.Z,{label:"Label",checked:l,inputProps:{id:"radio-2"},onChange:function(){n(!0)}})]})})};f.displayName="RadioControlledDemo";var R=f,g=l(9008),y=l(4069),T=l(7210);function C(t,e){var l=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),l.push.apply(l,n)}return l}function v(t){for(var e=1;e<arguments.length;e++){var l=null!=arguments[e]?arguments[e]:{};e%2?C(Object(l),!0).forEach((function(e){(0,n.Z)(t,e,l[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(l)):C(Object(l)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(l,e))}))}return t}var x={title:"Radio",description:"Radios are used to select a single state from multiple options.",getLayout:function(){return function(t){return(0,i.kt)(c.Z,{mdxType:"WithSidebar"},t)}}},Z={meta:x};function w(t){var e=t.components,l=(0,a.Z)(t,["components"]);return(0,i.kt)("wrapper",v(v(v({},Z),l),{},{components:e,mdxType:"MDXLayout"}),(0,i.kt)(g.default,{mdxType:"Head"},(0,T.aT)("".concat(x.title," | Sonnat Developer Tools, React Components & Resources")),(0,T.u2)(x.description),(0,T.ai)("".concat(y.z,"/docs/components/").concat(x.title)),(0,T.hL)([].concat((0,o.Z)(y.t),["radio"]))),(0,i.kt)("h1",null,(0,i.kt)("span",null,x.title),(0,i.kt)(k.Z,{anchorId:"overview",mdxType:"AnchorButton"}),(0,i.kt)(s.Z,{href:"pages/docs/components/".concat(x.title,".mdx"),mdxType:"PageEditButton"})),(0,i.kt)("p",null,x.description),(0,i.kt)("p",null,"The difference from"," ",(0,i.kt)("a",{href:"/docs/components/Select",title:"Select documentation"},"Select")," ","is that Radio is visible to the user and can facilitate the comparison of choice, which means there shouldn't be too many of them."),(0,i.kt)("h2",null,(0,i.kt)("span",null,"Simple Radios"),(0,i.kt)(k.Z,{anchorId:"simple-radios",mdxType:"AnchorButton"})),(0,i.kt)(b.Z,{code:'<Radio />\n<Radio disabled />\n<Radio defaultChecked disabled />\n<Radio inputProps={{ id: "radio-0" }} defaultChecked label="Label" />\n<Radio\n  inputProps={{ id: "radio-1" }}\n  defaultChecked\n  label="Label"\n  disabled\n/>',mdxType:"DemoBox"},(0,i.kt)(u.Z,{mdxType:"Radio"}),(0,i.kt)(u.Z,{disabled:!0,mdxType:"Radio"}),(0,i.kt)(u.Z,{defaultChecked:!0,disabled:!0,mdxType:"Radio"}),(0,i.kt)(u.Z,{inputProps:{id:"radio-0"},defaultChecked:!0,label:"Label",mdxType:"Radio"}),(0,i.kt)(u.Z,{inputProps:{id:"radio-1"},defaultChecked:!0,label:"Label",disabled:!0,mdxType:"Radio"})),(0,i.kt)("h2",null,(0,i.kt)("span",null,"Sizes"),(0,i.kt)(k.Z,{anchorId:"sizes",mdxType:"AnchorButton"})),(0,i.kt)("p",null,"To have the larger or smaller radios, use the ",(0,i.kt)("inlineCode",null,"size")," ","property."),(0,i.kt)(b.Z,{code:['<Radio label="Small" size="small" />','<Radio label="Medium (default)" size="medium" />','<Radio label="Large" size="large" />'].join("\n"),mdxType:"DemoBox"},(0,i.kt)(u.Z,{label:"Small",size:"small",className:"demoSubject",mdxType:"Radio"}),(0,i.kt)(u.Z,{label:"Medium (default)",size:"medium",className:"demoSubject",mdxType:"Radio"}),(0,i.kt)(u.Z,{label:"Large",size:"large",className:"demoSubject",mdxType:"Radio"})),(0,i.kt)("h2",null,(0,i.kt)("span",null,"Controlled Radios"),(0,i.kt)(k.Z,{anchorId:"controlled-radios",mdxType:"AnchorButton"})),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",null,"checked"),", and"," ",(0,i.kt)("inlineCode",null,"onChange")," properties to control the behaviour of the radio."),(0,i.kt)(R,{mdxType:"RadioControlledDemo"}),(0,i.kt)("h2",null,(0,i.kt)("span",null,"With ",(0,i.kt)("mark",null,"RadioGroup")),(0,i.kt)(k.Z,{anchorId:"with-radiogroup",mdxType:"AnchorButton"})),(0,i.kt)("p",null,(0,i.kt)("a",{href:"/docs/components/RadioGroup",title:"RadioGroup documentation"},"RadioGroup")," ","is a helpful wrapper used to group and manage radio controls with an easier API. RadioGroup can also be controlled/uncontrolled like the radios.",(0,i.kt)("br",null),"To learn more about ",(0,i.kt)("strong",null,"RadioGroup"),"'s API,"," ",(0,i.kt)("a",{href:"/docs/components/RadioGroup",title:"RadioGroup documentation"},"read it's documentation"),"."),(0,i.kt)(b.Z,{code:'<RadioGroup name="food" defaultValue={"kebab"}>\n  <Radio inputProps={{ id: "radio-00" }} label="Burger" value="burger" />\n  <Radio inputProps={{ id: "radio-01" }} label="Sushi" value="sushi" />\n  <Radio inputProps={{ id: "radio-02" }} label="Kebab" value="kebab" />\n</RadioGroup>',mdxType:"DemoBox"},(0,i.kt)(r.Z,{name:"food",defaultValue:"kebab",mdxType:"RadioGroup"},(0,i.kt)(u.Z,{inputProps:{id:"radio-00"},label:"Burger",value:"burger",mdxType:"Radio"}),(0,i.kt)(u.Z,{inputProps:{id:"radio-01"},label:"Sushi",value:"sushi",mdxType:"Radio"}),(0,i.kt)(u.Z,{inputProps:{id:"radio-02"},label:"Kebab",value:"kebab",mdxType:"Radio"}))),(0,i.kt)("h2",null,(0,i.kt)("span",null,"API"),(0,i.kt)(k.Z,{anchorId:"api",mdxType:"AnchorButton"})),(0,i.kt)("p",null,"Learn more about the properties and the customization points."),(0,i.kt)("h3",null,(0,i.kt)("span",null,"Usage"),(0,i.kt)(k.Z,{anchorId:"usage",mdxType:"AnchorButton"})),(0,i.kt)("pre",null,(0,i.kt)("code",v({parentName:"pre"},{className:"language-typescript"}),'// recommended\nimport Radio from "@sonnat/ui/Radio";\n\n//or\nimport { Radio } from "@sonnat/ui";\n')),(0,i.kt)("h3",null,(0,i.kt)("span",null,"Properties"),(0,i.kt)(k.Z,{anchorId:"properties",mdxType:"AnchorButton"})),(0,i.kt)("p",null,"Note that the documentation avoids mentioning all the native props (there are a lot) in this section of the components."),(0,i.kt)("table",{cols:4},(0,i.kt)("caption",null,"Radio Properties"),(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",null,"Name"),(0,i.kt)("th",null,"Type"),(0,i.kt)("th",null,"Default"),(0,i.kt)("th",null,"Description"))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,"className"),(0,i.kt)("td",null,"string"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"Append to the class names applied to the component so you can override or extend the styles.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"label"),(0,i.kt)("td",null,"string"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"If ",(0,i.kt)("inlineCode",null,"label")," was provided, a"," ",(0,i.kt)("inlineCode",null,"<label>")," element will be rendered next to the radio.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"name"),(0,i.kt)("td",null,"string"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"The name of the radio.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"value"),(0,i.kt)("td",null,"string"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"The value of the radio. The DOM API casts this to a string.",(0,i.kt)("br",null),"The browser uses ",(0,i.kt)("inlineCode",null,'"on"')," as the default value.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"size"),(0,i.kt)("td",null,'"large"',(0,i.kt)("br",null),'| "medium"',(0,i.kt)("br",null),'| "small"'),(0,i.kt)("td",null,'"medium"'),(0,i.kt)("td",null,"The size of the radio.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"readOnly"),(0,i.kt)("td",null,"boolean"),(0,i.kt)("td",null,"false"),(0,i.kt)("td",null,"If ",(0,i.kt)("inlineCode",null,"true"),", the radio will be read-only.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"checked"),(0,i.kt)("td",null,"boolean"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"If ",(0,i.kt)("inlineCode",null,"true"),", the radio will be checked.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"defaultChecked"),(0,i.kt)("td",null,"boolean"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"The default state of ",(0,i.kt)("inlineCode",null,"checked"),". Use when the component is not controlled.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"disabled"),(0,i.kt)("td",null,"boolean"),(0,i.kt)("td",null,"false"),(0,i.kt)("td",null,"If ",(0,i.kt)("inlineCode",null,"true"),", the radio will be disabled.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"required"),(0,i.kt)("td",null,"boolean"),(0,i.kt)("td",null,"false"),(0,i.kt)("td",null,"If ",(0,i.kt)("inlineCode",null,"true"),", the radio will be required.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"hasError"),(0,i.kt)("td",null,"boolean"),(0,i.kt)("td",null,"false"),(0,i.kt)("td",null,"If ",(0,i.kt)("inlineCode",null,"true"),", the radio will indicate invalid input.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"inputProps"),(0,i.kt)("td",null,"object"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"The properties applied to the ",(0,i.kt)("inlineCode",null,"input")," element.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"labelProps"),(0,i.kt)("td",null,"object"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"The properties applied to the ",(0,i.kt)("inlineCode",null,"label")," element.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"onChange"),(0,i.kt)("td",null,"function"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"The Callback fires when the state has changed.",(0,i.kt)("br",null),(0,i.kt)("em",null,(0,i.kt)("strong",null,"Signature:"))," ",(0,i.kt)("inlineCode",null,"function(event: React.ChangeEvent, checkedState: boolean) => void"),(0,i.kt)("br",null),(0,i.kt)("em",null,(0,i.kt)("strong",null,"Note:"))," ","You can also pull out the new checked state by accessing"," ",(0,i.kt)("inlineCode",null,"event.target.checked")," (boolean)."))),(0,i.kt)("tfoot",null,(0,i.kt)("tr",null,(0,i.kt)("td",{colSpan:"4"},(0,i.kt)("ul",null,(0,i.kt)("li",null,"The ",(0,i.kt)("inlineCode",null,"ref")," is forwarded to the root element."),(0,i.kt)("li",null,"Any other properties supplied will be provided to the root element.")))))))}w.isMDXComponent=!0},9939:function(t,e,l){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/components/Radio",function(){return l(6021)}])}},function(t){t.O(0,[7897,9739,5725,9774,2888,179],(function(){return e=9939,t(t.s=e);var e}));var e=t.O();_N_E=e}]);